# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# set title for current tab
set-title(){
  ORIG=$PS1
  TITLE="\e]2;$@\a"
  PS1=${ORIG}${TITLE}
}

#+-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+ +-+-+-+-+-+ +-+-+-+-+-+-+-+-+-+-+-+-+-+
#|G|r|a|p|h|i|c|s| |D|r|i|v|e|r|s| |S|t|a|c|k| |c|o|n|f|i|g|u|r|a|t|i|o|n|
#+-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+ +-+-+-+-+-+ +-+-+-+-+-+-+-+-+-+-+-+-+-+
export INSTALL_ROOT=/opt/X11R7
export PATH=${INSTALL_ROOT}/bin:$PATH
export LIBGL_DRIVERS_PATH=${INSTALL_ROOT}/lib/dri:${INSTALL_ROOT}/lib
export LD_LIBRARY_PATH=${INSTALL_ROOT}/lib:${INSTALL_ROOT}/lib/x86_64-linux-gnu:${INSTALL_ROOT}/lib32:/lib:/lib/x86_64-linux-gnu:/lib64:/usr/lib:/usr/lib64
export LIBGL_DEBUG=verbose
export PKG_CONFIG_PATH=${INSTALL_ROOT}/share/pkgconfig:${INSTALL_ROOT}/lib/pkgconfig:${INSTALL_ROOT}/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib/pkgconfig:$PKG_CONFIG_PATH
export SW="env LIBGL_ALWAYS_SOFTWARE=1"
export LDFLAGS=" -L${INSTALL_ROOT}/lib $LDFLAGS"
export ACLOCAL="aclocal -I ${INSTALL_ROOT}/share/aclocal"
export CMAKE_INCLUDE_PATH=${INSTALL_ROOT}/include/:$CMAKE_INCLUDE_PATH
export CMAKE_LIBRARY_PATH=${INSTALL_ROOT}/lib/:$CMAKE_LIBRARY_PATH
export LIBVA_DRIVERS_PATH=${INSTALL_ROOT}/lib/dri
export DISPLAY=:0
export GIT_SSL_NO_VERIFY=1
# >>> For intel-gpu-tools
export IGT_LOG_DEBUG=debug

#+-+-+-+-+-+ +-+-+-+-+-+-+-+-+-+-+-+-+-+
#|P|r|o|x|y| |c|o|n|f|i|g|u|r|a|t|i|o|n|
#+-+-+-+-+-+ +-+-+-+-+-+-+-+-+-+-+-+-+-+
# Setting proxies
function setproxy() {
    export {ALL_PROXY,all_proxy,socks_proxy}=socks://proxy-socks.fm.intel.com:1080
    export http_proxy=http://proxy.fm.intel.com:911
    export https_proxy=https://proxy.fm.intel.com:911
    export ftp_proxy=ftp://proxy.fm.intel.com:911
    export no_proxy=localhost,.intel.com,127.0.0.0/8,192.168.0.0/16,10.0.0.0/8
}

# Unsetting proxies
function unsetproxy() {
    unset {ALL_PROXY,all_proxy,socks_proxy,http_proxy,https_proxy,ftp_proxy,no_proxy}
}


#+-+-+-+-+-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+-+
#|x|s|e|r|v|e|r|-|x|o|r|g| |f|u|n|c|t|i|o|n|s|
#+-+-+-+-+-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+-+

# Note : if both 20-intel.conf and 20-modesetting.conf are defined in /etc/X11/xorg.conf.d/
# the X server will attempt to load the files in alpha-numeric order.

export modesetting_config_file="${INSTALL_ROOT}/share/X11/xorg.conf.d/20-modesetting.conf"
export sna_config_file="${INSTALL_ROOT}/share/X11/xorg.conf.d/20-intel.conf"

function setmodesetting(){

  # set modesetting driver as default for Xorg

    if [[ -f "${sna_config_file}" ]]; then
        echo "-- (info) -- deleting SNA configuration file"
        rm -rf "${sna_config_file}"
    fi

cat <<EOF >> "${modesetting_config_file}"
Section "Device"
       Identifier  "Intel Graphics"
       Driver      "modesetting"
       Option      "AccelMethod"  "glamor"
EndSection
EOF

if [[ $? -eq 0 ]]; then
  echo "-- (info) -- (${config_file}) was successfully created"
  echo "-- (info) -- please restart the system with : sudo reboot -f"
else
  echo "-- (error) -- could not be created (${config_file})"
fi

}

function setsna(){

  # set sna driver as default for Xorg

    if [[ -f "${modesetting_config_file}" ]]; then
        echo "-- (info) -- deleting modesetting configuration file"
        rm -rf "${modesetting_config_file}"
    fi

cat <<EOF >> "${sna_config_file}"
Section "Device"
       Identifier  "Intel Graphics"
       Driver      "intel"
       Option      "AccelMethod"  "sna"
EndSection
EOF

if [[ $? -eq 0 ]]; then
  echo "-- (info) -- (${config_file}) was successfully created"
  echo "-- (info) -- please restart the system with : sudo reboot -f"
else
  echo "-- (error) -- could not be created (${config_file})"
fi

}


function set_xserver_permissions(){

  # setting permissions for Xorg files

  declare -a xserver_cmd
  local stderr_flag=0

  xserver_cmd=("chown root.root /usr/bin/Xorg" "chmod 755 /usr/bin/Xorg" "chown root.root /etc/X11/xorg.conf" "chmod 755 /etc/X11/xorg.conf")

  for ((i = 0; i < ${#xserver_cmd[@]}; i++))
  do
      echo -ne "-- (cmd) -- ${xserver_cmd[$i]} ... "

      sudo ${xserver_cmd[$i]}

      if [[ $? -eq 0 ]]; then
        echo "[DONE]"
      else
        echo "[FAIL]"
        stderr_flag=1
      fi
  done

  if [[ ${stderr_flag} -eq 0 ]]; then
    echo "-- (info) -- please reboot the system with sudo reboot -f"
  else
    echo "-- (error) -- the permissions to Xorg files could not be applied"
    echo "-- (info) -- please contact : humberto.i.perez.rodriguez@intel.com"
  fi

}

#+-+-+-+-+-+-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#|M|i|s|c|e|l|l|a|n|e|o|u|s| |c|o|n|f|i|g|u|r|a|t|i|o|n|s|
#+-+-+-+-+-+-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+
export GIT_SSL_NO_VERIFY=1
export EDITOR=vim
export GIT_EDITOR=vim
PS1='[\u@\h] [\W]$ : '

alias qa='git clone https://github.intel.com/linuxgraphics/gfx-qa-tools.git'
alias title='set-title'

#+-+-+-+-+-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+
#|x|s|e|r|v|e|r|-|x|o|r|g| |a|l|i|a|s|e|s|
#+-+-+-+-+-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+
export XORG_LOG_PATH="/home/gfx/.local/share/xorg"
alias xserver_log='cd ${XORG_LOG_PATH}'
alias xserver_configuration_files='cd ${INSTALL_ROOT}/share/X11/xorg.conf.d'
alias config_file_sna='cat ${INSTALL_ROOT}/share/X11/xorg.conf.d/20-intel.conf'
alias config_file_modesetting='cat ${INSTALL_ROOT}/share/X11/xorg.conf.d/20-modesetting.conf'
alias xserver_errors='cat ${XORG_LOG_PATH}/Xorg.0.log | grep "(EE)"'
alias xserver_warnings='cat ${XORG_LOG_PATH}/Xorg.0.log | grep "(WW)"'
alias xserver_drivers_path='cd ${INSTALL_ROOT}/lib/xorg/modules/drivers'
alias check_sna='cat "${XORG_LOG_PATH}/Xorg.0.log | grep -i sna"'
alias check_modesetting='cat "${XORG_LOG_PATH}/Xorg.0.log | grep -i modesetting"'

# setting proxies
setproxy

