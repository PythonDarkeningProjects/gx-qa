#!/bin/bash

function start_time {

	unset date1
	date1=$(date +"%s")

}

function stop_time {

	unset date2 diff minutes seconds hours varhours varminutes varseconds
	date2=$(date +"%s")
	diff=$(($date2-$date1))   # <-- There is seconds
	# minutes=$((($diff / 60)))
	minutes=$(( (diff / 60) %60 ))
	seconds=$((($diff % 60)))
	hours=$((($minutes / 60)))

	if [ $hours != 0 ]; then varhours=$(echo "$hours Hours"); fi
	if [ $minutes != 0 ]; then varminutes=$(echo "$minutes Minutes"); fi
	if [ $seconds != 0 ]; then varseconds=$(echo "$seconds Seconds"); fi

	echo -e " --> $1 : $varhours $varminutes $varseconds "

}

#==============================================================================#
#        GLOBAL COLORS                                                         #
#==============================================================================#
export nc="\e[0m"
export underline="\e[4m"
export bold="\e[1m"
export green="\e[1;32m"
export red="\e[1;31m"
export yellow="\e[1;33m"
export blue="\e[1;34m"
export cyan="\e[1;36m"

#==============================================================================#
#        GLOBAL VARIABLES                                                      #
#==============================================================================#
# The local work directory
WORKDIR="/root/custom"
ENV_FILE="${WORKDIR}/env.vars"
export thispath=`cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd`
export IP_ADDRESS=`hostname -I | sed 's/ //g'`

# Checking if the newtwork was initialized correctly
source ${ENV_FILE}

if [ "${IP_ADDRESS}" = "False" ]; then
	echo -ne "\n\n"
	echo -ne "${red}>>> (err)${nc} Not IP address was detected, please make sure that you have a ethernet cable connected in the system \n\n"
	exit 1

fi


# looking for the usb
whereisUSB=`lsblk -S | grep usb | awk '{print $1}'`
# getting the disk/eMMC attached to the DUT
lsblk -d | grep -ve ${whereisUSB} -ve "filesystem.squashfs" -ve M > attachedDisk
# selecting mayor disk capacity to clone
howManyDisk=`cat attachedDisk | wc -l`

# here i guess that the maximum disk in the DUT will be 2 in the worst case
if [ ${howManyDisk} -eq 1 ];then
	echo -e "${blue}>>> (info)${nc} 1 disk was found in the DUT"
	export disk_label=`cat attachedDisk | head -1 | awk '{print $1}'`

elif [ ${howManyDisk} -eq 2 ];then
	echo -e "${blue}>>> (info)${nc} 2 disk was found in the DUT"
	echo -e "${blue}>>> (info)${nc} Selecting the highest capacity disk ..."
	disk_A=`cat attachedDisk | head -1 | awk '{print $1}'`
	disk_B=`cat attachedDisk | tail -1 | awk '{print $1}'`
	disk_A_capacity=`lsblk -b --output SIZE -n -d /dev/${disk_A}`
	disk_B_capacity=`lsblk -b --output SIZE -n -d /dev/${disk_B}`

	if [ ${disk_A_capacity} -gt ${disk_B_capacity} ]; then
		echo -e "${blue}>>> (info)${nc} dev/${disk_A} was selected"
		export disk_label=${disk_A}
	elif [ ${disk_B_capacity} -gt ${disk_A_capacity} ]; then
		echo -e "${blue}>>> (info)${nc} dev/${disk_B} was selected"
		export disk_label=${disk_B}
	fi

elif [ ${howManyDisk} -eq 0 ];then
	echo -ne "\n\n"
	cat ${thispath}/asciiImages/homero
	echo -ne "${red}>>> (err)${nc} no disks were found in the DUT \n\n\n"
	exit 1
fi

#disk_label=`lsblk | grep sda | head -1 | awk '{print $1}'`
disk_size=`lsblk | grep -w ${disk_label} | head -1 | awk '{print $4}'`

pause(){
	local m="$@"
	echo "$m"
	}


while :
do
	clear; echo -ne "\n\n\n"
	echo -ne " IntelÂ® Graphics for Linux* | 01.org \n\n"
	echo -ne " ${cyan}IP ADDRESS${nc} : (${IP_ADDRESS}) \n"
	echo -ne " ${yellow}Disk size${nc}  : [${disk_size}] \n"
	echo -ne " ${yellow}Disk label${nc} : [${disk_label}] \n"
	echo -ne " Enter the name for the image to save \n\n"
	echo -ne " Recommended names : ubuntu__version__xxbit__disk-size__comment-optional \n\n"
	read -e -p " Name : " image_name


	if [ -z "${image_name}" ]; then
		pause
	else
		echo -ne "\n\n"
		echo -ne " The name typed was : (${cyan}[${image_name}]${nc}) do you agree ? \n\n"
		echo " 1) Yes"
		echo -ne " 2) No \n\n"
		read -e -p " Your choice : " choose

		case ${choose} in

			1)
				start_time
				#/usr/sbin/ocs-sr --batch -q2 -j2 -z1p -i 2000 -p true -nogui savedisk "${image_name}" "${disk_label}" # oldest
				# /usr/sbin/ocs-sr --batch -q2 -j2 -z1p -i 2000 -fsck-src-part-y -p true savedisk "${image_name}" "${disk_label}" # this method works with all ubuntu images
				/usr/sbin/ocs-sr --batch -q1 -j2 -z1p -i 2000 -fsck-src-part-y -p true savedisk "${image_name}" "${disk_label}" # this methdd works when restore a disk with fedora images (it will works with ubuntu ?)
				if [ $? -eq 0 ]; then
					echo -ne "\n\n\n"
					cat ${thispath}/asciiImages/bart
					echo -e "${green}+-+-+-+-+-+-+-+-+-+-+ +-+-+-+ +-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+-+-+-+${nc}"
					echo -e "|C|L|O|N|E|Z|I|L|L|A| |H|A|S| |F|I|N|I|S|H| |S|U|C|E|S|S|F|U|L|L|Y|"
					echo -ne "${green}+-+-+-+-+-+-+-+-+-+-+ +-+-+-+ +-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+-+-+-+${nc} \n\n"

					stop_time "${cyan}backup total time was${nc}"
					echo -ne ">>> (info) Now you can reboot the DUT and unplug the USB stick \n\n\n"
				else
					echo -ne "\n\n\n"
					cat ${thispath}/asciiImages/homero
					echo -e "${red}+-+-+-+-+-+-+-+-+-+-+ +-+-+-+-+-+${nc}"
					echo -e "|C|L|O|N|E|Z|I|L|L|A| |E|R|R|O|R|"
					echo -ne "${red}+-+-+-+-+-+-+-+-+-+-+ +-+-+-+-+-+${nc} \n\n"

					stop_time "${cyan}backup total time was${nc}"
					echo -e ">>> (err) an error occurred during backup the image"
				fi
				exit 1
			;;

			2) pause ;;

		esac

	fi

done



#if [ $# -lt 2 ]
#then
#    echo "Usage: ${0##*/} IMAGE DISK"
#    echo "       e.g: ${0##*/} linux-ubuntu-16.04-64bit sda"
#    exit 1
#fi

#/usr/sbin/ocs-sr --batch -q2 -j2 -z1p -i 2000 -p true -nogui savedisk "$1" "$2"

#exit $?
