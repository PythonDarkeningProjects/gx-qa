#!/bin/bash


function start_time {
	unset date1
	date1=$(date +"%s")
}

function stop_time {
	unset date2 diff minutes seconds hours varhours varminutes varseconds
	date2=$(date +"%s")
	diff=$(($date2-$date1))   # <-- There is seconds
	# minutes=$((($diff / 60)))
	minutes=$(( (diff / 60) %60 ))
	seconds=$((($diff % 60)))
	hours=$((($minutes / 60)))

	if [ $hours != 0 ]; then varhours=$(echo "$hours Hours"); fi
	if [ $minutes != 0 ]; then varminutes=$(echo "$minutes Minutes"); fi
	if [ $seconds != 0 ]; then varseconds=$(echo "$seconds Seconds"); fi

	echo -e "${blue}>>> (info)${nc} $1 : $varhours $varminutes $varseconds "
}


#==============================================================================#
#        LOCAL COLORS                                                          #
#==============================================================================#
export nc="\e[0m"
export underline="\e[4m"
export bold="\e[1m"
export green="\e[1;32m"
export red="\e[1;31m"
export yellow="\e[1;33m"
export blue="\e[1;34m"
export cyan="\e[1;36m"

#==============================================================================#
#        LOCAL VARIABLES                                                       #
#==============================================================================#
# The local work directory
WORKDIR="/root/custom"
ENV_FILE="${WORKDIR}/env.vars"
CONFIG_FILE="${WORKDIR}/config.cfg"
source ${CONFIG_FILE}
export IP_ADDRESS=`hostname -I | sed 's/ //g'`
export thispath=`cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd`


# looking for the usb
whereisUSB=`lsblk -S | grep usb | awk '{print $1}'`
# getting the disk/eMMC attached to the DUT
lsblk -d | grep -ve ${whereisUSB} -ve "filesystem.squashfs" -ve M > attachedDisk
# selecting mayor disk capacity to clone
howManyDisk=`cat attachedDisk | wc -l`

# here i guess that the maximum disk in the DUT will be 2 in the worst case
if [ ${howManyDisk} -eq 1 ];then
	echo -e "${blue}>>> (info)${nc} 1 disk was found in the DUT"
	export disk_label=`cat attachedDisk | head -1 | awk '{print $1}'`

elif [ ${howManyDisk} -eq 2 ];then
	echo -e "${blue}>>> (info)${nc} 2 disk was found in the DUT"
	echo -e "${blue}>>> (info)${nc} Selecting the highest capacity disk ..."
	disk_A=`cat attachedDisk | head -1 | awk '{print $1}'`
	disk_B=`cat attachedDisk | tail -1 | awk '{print $1}'`
	disk_A_capacity=`lsblk -b --output SIZE -n -d /dev/${disk_A}`
	disk_B_capacity=`lsblk -b --output SIZE -n -d /dev/${disk_B}`

	if [ ${disk_A_capacity} -gt ${disk_B_capacity} ]; then
		echo -e "${blue}>>> (info)${nc} dev/${disk_A} was selected"
		export disk_label=${disk_A}
	elif [ ${disk_B_capacity} -gt ${disk_A_capacity} ]; then
		echo -e "${blue}>>> (info)${nc} dev/${disk_B} was selected"
		export disk_label=${disk_B}
	fi

elif [ ${howManyDisk} -eq 0 ];then
	echo -ne "\n\n"
	cat ${thispath}/asciiImages/homero
	echo -ne "${red}>>> (err)${nc} no disks were found in the DUT \n\n\n"
	exit 1
fi

#disk_label=`lsblk | grep sda | head -1 | awk '{print $1}'`


# The local mount directories
PARTIMAG="/home/partimag"
SHARED="/home/shared"
ls ${PARTIMAG} > /tmp/img
export images=`cat -n /tmp/img`

# Checking if the newtwork was initialized correctly
source ${ENV_FILE}

if [ "${IP_ADDRESS}" = "False" ]; then
	echo -ne "\n\n"
	echo -ne "${red}>>> (err)${nc} Not IP address was detected, please make sure that you have a ethernet cable connected in the system \n\n"
	exit 1

fi

function download_clonezilla_image {
	# function dedicated for the automated system
	if [[ ! -z "$1" && ! -z "$2" ]]; then

		# param:
		#   - image_to_restore: this is the name of the image to be downloaded
		#   from bifrost.intel.com.
		image_to_restore="$1"
		local restoring_attempts=1
		local restoring_exit_code=1
		start_time
		while [[ ${restoring_attempts} -lt 4 && ${restoring_exit_code} -ne 0 ]]; do
			echo -ne "\n\n"
			echo -ne " >>> (info) ${cyan}Restoring the following image${nc} : (${image_to_restore})\n"
			echo -ne " >>> (info) ${cyan}Attempt number${nc} : (${restoring_attempts}) \n\n"
			#/usr/sbin/ocs-sr --batch -g auto -e1 auto -e2 -r -j2 -p true -nogui restoredisk "$1" "$2" (deprecated)
			#/usr/sbin/ocs-sr --batch -g auto -e1 auto -e2 -r -j2 -p true restoredisk "$1" "$2" (deprecated since 5/18/2017)
			####################################################################################################
			# (-g auto) options is valid for the following os systems :
			# - Fedora 64bit
			# - Ubuntu 64/32 Bit
			# This option allows to clonezilla to update the kernel finding the MRB partition, but this does not happen
			# on the mentioned system (due to clonezilla does not find some configuration script), due this reason
			# all this os system are able to boot in any machine, but this does no happen with Fedora32 bit, on Fedora32bit
			# clonezilla is able to update the kernel and this causes a mismatch with the UUID of the hard driver, for that
			# reason we get a grub rescue image, to find this issue and make clonezilla works on Fedora/Ubuntu 32/64bits we
			# have to remove (-g auto) options, to remove any chanse that clonezilla makes a kernel update
			# References : http://allthatnetwork.blogspot.com/2012/10/clonezilla-ocs-sr-options.html
			/usr/sbin/ocs-sr --batch -e1 auto -e2 -r -j2 -p true restoredisk "${image_to_restore}" "$2"
			####################################################################################################
			restoring_exit_code=$?
			restoring_attempts=$((restoring_attempts++))
		done

		if [[ ${restoring_exit_code} -eq 0 ]]; then
			echo -ne "\n\n\n"
			cat ${thispath}/asciiImages/bart
			echo -e "${green}+-+-+-+-+-+-+-+-+-+-+ +-+-+-+ +-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+-+-+-+${nc}"
			echo -e "|C|L|O|N|E|Z|I|L|L|A| |H|A|S| |F|I|N|I|S|H| |S|U|C|E|S|S|F|U|L|L|Y|"
			echo -ne "${green}+-+-+-+-+-+-+-+-+-+-+ +-+-+-+ +-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+-+-+-+${nc} \n\n"

			echo -e "${blue}==========================================================================${nc}"
			stop_time "${cyan}restore total time was${nc}"
			echo -e ">>> (info) The image was restored : [${green}successfully${nc}]"
			echo -ne ">>> (info) Now you can reboot the DUT and unplug the USB stick \n"
			echo -ne "${blue}==========================================================================${nc} \n\n\n"

			# resizing disk
			bash "${thispath}"/resize-disk "${image_to_restore}"

			exit
		else
			echo -ne "\n\n\n"
			cat ${thispath}/asciiImages/homero
			echo -e "${red}+-+-+-+-+-+-+-+-+-+-+ +-+-+-+-+-+${nc}"
			echo -e "|C|L|O|N|E|Z|I|L|L|A| |E|R|R|O|R|"
			echo -ne "${red}+-+-+-+-+-+-+-+-+-+-+ +-+-+-+-+-+${nc} \n\n"

			stop_time "${cyan}backup total time was${nc}"
			echo -e ">>> (err) an error occurred during restoring the image"
			exit 1
		fi


	fi

}

# this part of the code mean that if the script is being called from the
# automated system this will enter to download_clonezilla_image function.
download_clonezilla_image $1 $2

disk_size=`lsblk | grep -w ${disk_label} | head -1 | awk '{print $4}'`

pause(){
	local m="$@"
	echo "$m"
}


while :
do
	clear; echo -ne "\n\n\n"
	echo -ne " IntelÂ® Graphics for Linux* | 01.org \n\n"
	echo -ne "${blue}>>> (info)${nc} The following images comes from (${server_hostname}) \n\n"
	echo -ne " ${cyan}IP ADDRESS${nc} : (${IP_ADDRESS}) \n"
	echo -ne " ${yellow}Disk size${nc}  : [${disk_size}] \n"
	echo -ne " ${yellow}Disk label${nc} : [${disk_label}] \n\n"
	echo -ne " Select one image to restore \n\n"
	echo -ne "${images} \n\n"
	read -e -p " Your choice : " choose

	validate=`cat -n /tmp/img | grep -w ${choose}`

	if [ -z "${validate}" ]; then
		pause
	else
		image=`cat -n /tmp/img | grep -w "${choose}" | awk '{print $2}'`

		#==============================================================================#
		#        CHECKING IMAGE and DISK SIZE                                          #
		#==============================================================================#
		#restore_image_size=`cat ${PARTIMAG}/${image}/blkdev.list | grep -v KNAME | head -1 | awk '{print $3}' | tr -d "GBM"`
		restore_image_size=`cat ${PARTIMAG}/${image}/blkdev.list | grep -w "sda" | awk '{print $3}' | tr -d "GBM"` # works with all Ubuntu versions
		#disk_size=`lsblk | grep sda | head -1 | awk '{print $4}' | tr -d "GBM"`
		disk_size=`lsblk | grep -w ${disk_label} | head -1 | awk '{print $4}' | tr -d "GBM"`

		if (( $(echo "$disk_size < $restore_image_size" | bc -l )  )); then
			echo -ne "\n\n"
			cat ${thispath}/asciiImages/homero
			echo -e "${red}+-+-+-+-+ +-+-+-+-+ +-+-+-+-+-+${nc}"
			echo -e "|D|I|S|K| |S|I|Z|E| |E|R|R|O|R|"
			echo -ne "${red}+-+-+-+-+ +-+-+-+-+ +-+-+-+-+-+${nc} \n\n"

			echo -ne " <--> The disk size is less than the image to restore \n"
			echo -ne "     -- disk size             : [${disk_size}GB] \n"
			echo -ne "     -- image to restore size : [${restore_image_size}GB] \n"
			echo -ne " <--> please try with a hard drive equal or greater than : [${restore_image_size}GB] \n\n\n"
			exit 1
		fi


		start_time
		restoring_attempts=1
		restoring_exit_code=1
		while [[ ${restoring_attempts} -lt 4 && ${restoring_exit_code} -ne 0 ]]; do
			echo -ne "\n\n"
			echo -ne " >>> (info) ${cyan}Restoring the following image${nc} : (${image})\n"
			echo -ne " >>> (info) ${cyan}Attempt number${nc} : (${restoring_attempts}) \n\n"
			#/usr/sbin/ocs-sr --batch -g auto -e1 auto -e2 -r -j2 -p true -nogui restoredisk "${image}" "${disk_label}" # (deprecated)
			# /usr/sbin/ocs-sr --batch -g auto -e1 auto -e2 -r -j2 -p true restoredisk "${image}" "${disk_label}" # (deprecated since 5/18/2017)
			####################################################################################################
			# (-g auto) options is valid for the following os systems :
			# - Fedora 64bit
			# - Ubuntu 64/32 Bit
			# This option allows to clonezilla to update the kernel finding the MRB partition, but this does not happen
			# on the mentioned system (due to clonzilla does not find some configuration script), due this reason
			# all this os system are able to boot in any machine, but this does no happen with Fedora32 bit, on Fedora32bit
			# clonezilla is able to update the kernel and this causes a mismatch with the UUID of the hard driver, for that
			# reason we get a grub rescue image, to find this issue and make clonezilla works on Fedora/Ubuntu 32/64bits we
			# have to remove (-g auto) options, to remove any chanse that clonezilla makes a kernel update
			# References : http://allthatnetwork.blogspot.com/2012/10/clonezilla-ocs-sr-options.html
			/usr/sbin/ocs-sr --batch -e1 auto -e2 -r -j2 -p true restoredisk "${image}" "${disk_label}"
			####################################################################################################
			restoring_exit_code=$?
			restoring_attempts=$((restoring_attempts++))
	 done

		if [[ $restoring_exit_code -eq 0 ]]; then
			echo -ne "\n\n\n"
			cat ${thispath}/asciiImages/bart
			echo -e "${green}+-+-+-+-+-+-+-+-+-+-+ +-+-+-+ +-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+-+-+-+${nc}"
			echo -e "|C|L|O|N|E|Z|I|L|L|A| |H|A|S| |F|I|N|I|S|H| |S|U|C|E|S|S|F|U|L|L|Y|"
			echo -ne "${green}+-+-+-+-+-+-+-+-+-+-+ +-+-+-+ +-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+-+-+-+${nc} \n\n"

			echo -e "${blue}==========================================================================${nc}"
			stop_time "${cyan}restore total time was${nc}"
			echo -e "${blue}>>> (info)${nc} Image restored  : [${image}]"
			echo -e "${blue}>>> (info)${nc} Now you can reboot the DUT and unplug the USB stick"
			echo -ne "${blue}==========================================================================${nc} \n\n\n"

			# resizing disk
			bash "${thispath}"/resize-disk "${image}"
			exit
		else
			echo -ne "\n\n\n"
			cat ${thispath}/asciiImages/homero
			echo -e "${red}+-+-+-+-+-+-+-+-+-+-+ +-+-+-+-+-+${nc}"
			echo -e "|C|L|O|N|E|Z|I|L|L|A| |E|R|R|O|R|"
			echo -ne "${red}+-+-+-+-+-+-+-+-+-+-+ +-+-+-+-+-+${nc} \n\n"

			stop_time "${cyan}backup total time was${nc}"
			echo -e " ==> an error occurred during restoring the image [${image}] <== "
			exit 1
		fi
	fi

done




#if [ $# -lt 2 ]
#then
#	echo "Usage: ${0##*/} IMAGE DISK"
#	echo "	   e.g: ${0##*/} linux-ubuntu-16.04-64bit sda"
#	exit 1
#fi


#/usr/sbin/ocs-sr --batch -g auto -e1 auto -e2 -r -j2 -p true -nogui restoredisk "$1" "$2"

#exit $?
